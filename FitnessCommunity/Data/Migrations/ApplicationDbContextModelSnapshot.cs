// <auto-generated />
using System;
using FitnessCommunity.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FitnessCommunity.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.2-rtm-30932")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FitnessCommunity.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<int>("MeasureType");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("PublicInfo");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users");

                    b.HasData(
                        new { Id = "2204dae4-6cb2-4dbd-aac8-972d486ed767", AccessFailedCount = 0, ConcurrencyStamp = "2b0716fa-51e0-432e-8a70-d76cc19fc153", Email = "test@test.com", EmailConfirmed = false, FirstName = "Ana", LastName = "Anic", LockoutEnabled = false, MeasureType = 0, NormalizedEmail = "TEST@TEST.COM", NormalizedUserName = "TEST@TEST.COM", PasswordHash = "AQAAAAEAACcQAAAAELDDBjldTca23egUkVYyY+T1RPphJETIEqcDq142PV6dR2hy4Zbu0d7VHlmzZDVrOg==", PhoneNumberConfirmed = false, SecurityStamp = "0e1df3ba-3d31-4ad7-8ed8-382a2e8555b9", TwoFactorEnabled = false, UserName = "test@test.com" },
                        new { Id = "a5ee4b19-904d-4834-9faf-3074b29c6551", AccessFailedCount = 0, ConcurrencyStamp = "83999c03-0389-4815-bd53-2632090f67b4", Email = "test1@test.com", EmailConfirmed = false, FirstName = "Pero", LastName = "Peric", LockoutEnabled = false, MeasureType = 0, NormalizedEmail = "TEST1@TEST.COM", NormalizedUserName = "TEST1@TEST.COM", PasswordHash = "AQAAAAEAACcQAAAAELDDBjldTca23egUkVYyY+T1RPphJETIEqcDq142PV6dR2hy4Zbu0d7VHlmzZDVrOg==", PhoneNumberConfirmed = false, SecurityStamp = "68614e7e-9b05-42e8-a2db-1334c2abdcf1", TwoFactorEnabled = false, UserName = "test1@test.com" }
                    );
                });

            modelBuilder.Entity("FitnessCommunity.Models.WeightLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("LogDate");

                    b.Property<string>("UserId");

                    b.Property<float>("WeightValue");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Logs");

                    b.HasData(
                        new { Id = new Guid("f9c397fb-c94b-43ea-bbea-9d128b643cc9"), LogDate = new DateTime(2018, 9, 16, 21, 9, 52, 221, DateTimeKind.Local), UserId = "a5ee4b19-904d-4834-9faf-3074b29c6551", WeightValue = 80f },
                        new { Id = new Guid("86024fe0-d89b-4401-8e7f-f657ba14c386"), LogDate = new DateTime(2018, 9, 17, 21, 9, 52, 225, DateTimeKind.Local), UserId = "a5ee4b19-904d-4834-9faf-3074b29c6551", WeightValue = 81f },
                        new { Id = new Guid("5b0cc703-7435-4c58-8e2b-e38ee2536855"), LogDate = new DateTime(2018, 9, 18, 21, 9, 52, 225, DateTimeKind.Local), UserId = "a5ee4b19-904d-4834-9faf-3074b29c6551", WeightValue = 82f },
                        new { Id = new Guid("9eca5dab-1113-4179-b4ba-6477db9ac926"), LogDate = new DateTime(2018, 9, 19, 21, 9, 52, 225, DateTimeKind.Local), UserId = "a5ee4b19-904d-4834-9faf-3074b29c6551", WeightValue = 83f },
                        new { Id = new Guid("953f6200-f2ef-4d2e-ae40-31e1ccb423c8"), LogDate = new DateTime(2018, 9, 20, 21, 9, 52, 225, DateTimeKind.Local), UserId = "a5ee4b19-904d-4834-9faf-3074b29c6551", WeightValue = 84f },
                        new { Id = new Guid("b1904418-b8fa-4615-a899-d43f7bfef2c1"), LogDate = new DateTime(2018, 9, 21, 21, 9, 52, 225, DateTimeKind.Local), UserId = "a5ee4b19-904d-4834-9faf-3074b29c6551", WeightValue = 85f },
                        new { Id = new Guid("e38a64b5-3261-403a-a208-704ecc70fbb5"), LogDate = new DateTime(2018, 9, 22, 21, 9, 52, 225, DateTimeKind.Local), UserId = "a5ee4b19-904d-4834-9faf-3074b29c6551", WeightValue = 86f },
                        new { Id = new Guid("ad60cded-2966-46b2-8e01-e43065cc8837"), LogDate = new DateTime(2018, 9, 23, 21, 9, 52, 225, DateTimeKind.Local), UserId = "a5ee4b19-904d-4834-9faf-3074b29c6551", WeightValue = 87f },
                        new { Id = new Guid("af2d02df-6629-4a71-8521-5174b12ccae3"), LogDate = new DateTime(2018, 9, 24, 21, 9, 52, 225, DateTimeKind.Local), UserId = "a5ee4b19-904d-4834-9faf-3074b29c6551", WeightValue = 88f },
                        new { Id = new Guid("e304ead4-2edd-4e98-a562-9cef8cb922c2"), LogDate = new DateTime(2018, 9, 25, 21, 9, 52, 225, DateTimeKind.Local), UserId = "a5ee4b19-904d-4834-9faf-3074b29c6551", WeightValue = 89f },
                        new { Id = new Guid("1bd1b772-11c1-42d8-9d02-625506182c6f"), LogDate = new DateTime(2018, 9, 16, 21, 9, 52, 225, DateTimeKind.Local), UserId = "2204dae4-6cb2-4dbd-aac8-972d486ed767", WeightValue = 80f },
                        new { Id = new Guid("e0fec932-86e9-4ff5-b319-cd6eef1c245d"), LogDate = new DateTime(2018, 9, 17, 21, 9, 52, 225, DateTimeKind.Local), UserId = "2204dae4-6cb2-4dbd-aac8-972d486ed767", WeightValue = 81f },
                        new { Id = new Guid("8131aeeb-585c-4b2e-9758-9065038195e7"), LogDate = new DateTime(2018, 9, 18, 21, 9, 52, 225, DateTimeKind.Local), UserId = "2204dae4-6cb2-4dbd-aac8-972d486ed767", WeightValue = 82f },
                        new { Id = new Guid("b9d4df67-8c44-470d-8691-dd47391a25c4"), LogDate = new DateTime(2018, 9, 19, 21, 9, 52, 225, DateTimeKind.Local), UserId = "2204dae4-6cb2-4dbd-aac8-972d486ed767", WeightValue = 83f },
                        new { Id = new Guid("4872e588-d185-462f-a06a-fe0f2eb98291"), LogDate = new DateTime(2018, 9, 20, 21, 9, 52, 225, DateTimeKind.Local), UserId = "2204dae4-6cb2-4dbd-aac8-972d486ed767", WeightValue = 84f },
                        new { Id = new Guid("36a79431-3468-464f-bef1-df08bebd12cc"), LogDate = new DateTime(2018, 9, 21, 21, 9, 52, 225, DateTimeKind.Local), UserId = "2204dae4-6cb2-4dbd-aac8-972d486ed767", WeightValue = 85f },
                        new { Id = new Guid("22684c6e-8890-4be9-825d-660fbfb82c4e"), LogDate = new DateTime(2018, 9, 22, 21, 9, 52, 225, DateTimeKind.Local), UserId = "2204dae4-6cb2-4dbd-aac8-972d486ed767", WeightValue = 86f },
                        new { Id = new Guid("e94a287f-5380-4011-bf47-5bb569347808"), LogDate = new DateTime(2018, 9, 23, 21, 9, 52, 225, DateTimeKind.Local), UserId = "2204dae4-6cb2-4dbd-aac8-972d486ed767", WeightValue = 87f },
                        new { Id = new Guid("b215c365-c1ce-4b48-82bc-63339f046d30"), LogDate = new DateTime(2018, 9, 24, 21, 9, 52, 225, DateTimeKind.Local), UserId = "2204dae4-6cb2-4dbd-aac8-972d486ed767", WeightValue = 88f },
                        new { Id = new Guid("eeaf5608-8203-4c07-a843-0d73c825653b"), LogDate = new DateTime(2018, 9, 25, 21, 9, 52, 225, DateTimeKind.Local), UserId = "2204dae4-6cb2-4dbd-aac8-972d486ed767", WeightValue = 89f }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("FitnessCommunity.Models.WeightLog", b =>
                {
                    b.HasOne("FitnessCommunity.Models.ApplicationUser", "User")
                        .WithMany("WeightLogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("FitnessCommunity.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("FitnessCommunity.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FitnessCommunity.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("FitnessCommunity.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
