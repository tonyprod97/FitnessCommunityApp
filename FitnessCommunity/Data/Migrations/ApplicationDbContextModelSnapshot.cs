// <auto-generated />
using System;
using FitnessCommunity.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FitnessCommunity.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.3-rtm-32065")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FitnessCommunity.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<int>("MeasureType");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("PublicInfo");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users");

                    b.HasData(
                        new { Id = "2204dae4-6cb2-4dbd-aac8-972d486ed767", AccessFailedCount = 0, ConcurrencyStamp = "521cf4b3-505c-4700-af88-78bc8e4f8c7a", Email = "ana.anic@gmail.com", EmailConfirmed = false, FirstName = "Ana", LastName = "Anic", LockoutEnabled = false, MeasureType = 0, NormalizedEmail = "ANA.ANIC@GMAIL.COM", NormalizedUserName = "ANA.ANIC@GMAIL.COM", PasswordHash = "AQAAAAEAACcQAAAAELDDBjldTca23egUkVYyY+T1RPphJETIEqcDq142PV6dR2hy4Zbu0d7VHlmzZDVrOg==", PhoneNumberConfirmed = false, SecurityStamp = "2c1530ac-c46a-4649-990d-a131c5ccefb8", TwoFactorEnabled = false, UserName = "ana.anic@gmail.com" },
                        new { Id = "a5ee4b19-904d-4834-9faf-3074b29c6551", AccessFailedCount = 0, ConcurrencyStamp = "963235e5-4572-414b-a420-8d7580573fb7", Email = "pero.peric@gmail.com", EmailConfirmed = false, FirstName = "Pero", LastName = "Peric", LockoutEnabled = false, MeasureType = 0, NormalizedEmail = "PERO.PERIC@GMAIL.COM", NormalizedUserName = "PERO.PERIC@GMAIL.COM", PasswordHash = "AQAAAAEAACcQAAAAELDDBjldTca23egUkVYyY+T1RPphJETIEqcDq142PV6dR2hy4Zbu0d7VHlmzZDVrOg==", PhoneNumberConfirmed = false, SecurityStamp = "7e3db214-2c8b-4d5a-b472-e3a6e5f0e1cd", TwoFactorEnabled = false, UserName = "pero.peric@gmail.com" }
                    );
                });

            modelBuilder.Entity("FitnessCommunity.Models.WeightLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("LogDate");

                    b.Property<string>("UserId");

                    b.Property<float>("WeightValue");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Logs");

                    b.HasData(
                        new { Id = new Guid("8c2a57f3-2556-4958-ae64-51633a8d85d0"), LogDate = new DateTime(2018, 10, 1, 22, 19, 37, 558, DateTimeKind.Local), UserId = "a5ee4b19-904d-4834-9faf-3074b29c6551", WeightValue = 80f },
                        new { Id = new Guid("bb4718b3-39df-48dd-b90b-998e5c337df3"), LogDate = new DateTime(2018, 10, 2, 22, 19, 37, 560, DateTimeKind.Local), UserId = "a5ee4b19-904d-4834-9faf-3074b29c6551", WeightValue = 81f },
                        new { Id = new Guid("1b62eabe-77c5-4d08-8f80-97175b404731"), LogDate = new DateTime(2018, 10, 3, 22, 19, 37, 560, DateTimeKind.Local), UserId = "a5ee4b19-904d-4834-9faf-3074b29c6551", WeightValue = 82f },
                        new { Id = new Guid("1ad55c84-e395-4e6f-a751-cbaeef7e9f74"), LogDate = new DateTime(2018, 10, 4, 22, 19, 37, 560, DateTimeKind.Local), UserId = "a5ee4b19-904d-4834-9faf-3074b29c6551", WeightValue = 83f },
                        new { Id = new Guid("fcefc728-1517-4c1d-9005-929a27146391"), LogDate = new DateTime(2018, 10, 5, 22, 19, 37, 560, DateTimeKind.Local), UserId = "a5ee4b19-904d-4834-9faf-3074b29c6551", WeightValue = 84f },
                        new { Id = new Guid("40d86e42-dca5-431a-adc9-fc5cf12814ed"), LogDate = new DateTime(2018, 10, 6, 22, 19, 37, 560, DateTimeKind.Local), UserId = "a5ee4b19-904d-4834-9faf-3074b29c6551", WeightValue = 85f },
                        new { Id = new Guid("4f7cef42-cb41-4fde-acb1-4f25007443b5"), LogDate = new DateTime(2018, 10, 7, 22, 19, 37, 560, DateTimeKind.Local), UserId = "a5ee4b19-904d-4834-9faf-3074b29c6551", WeightValue = 86f },
                        new { Id = new Guid("cc8ac79c-f879-4f2d-b9e8-ed3848de1124"), LogDate = new DateTime(2018, 10, 8, 22, 19, 37, 560, DateTimeKind.Local), UserId = "a5ee4b19-904d-4834-9faf-3074b29c6551", WeightValue = 87f },
                        new { Id = new Guid("8561d89b-b3f0-40e3-a345-5a388f0896da"), LogDate = new DateTime(2018, 10, 9, 22, 19, 37, 560, DateTimeKind.Local), UserId = "a5ee4b19-904d-4834-9faf-3074b29c6551", WeightValue = 88f },
                        new { Id = new Guid("91998422-08d2-45c0-b7d6-e720c0bf0626"), LogDate = new DateTime(2018, 10, 10, 22, 19, 37, 560, DateTimeKind.Local), UserId = "a5ee4b19-904d-4834-9faf-3074b29c6551", WeightValue = 89f },
                        new { Id = new Guid("2a6994c9-54fb-4cd9-956f-d9257b82f914"), LogDate = new DateTime(2018, 10, 1, 22, 19, 37, 560, DateTimeKind.Local), UserId = "2204dae4-6cb2-4dbd-aac8-972d486ed767", WeightValue = 80f },
                        new { Id = new Guid("36173845-6235-4d04-a2a8-a2e516ea98f2"), LogDate = new DateTime(2018, 10, 2, 22, 19, 37, 560, DateTimeKind.Local), UserId = "2204dae4-6cb2-4dbd-aac8-972d486ed767", WeightValue = 81f },
                        new { Id = new Guid("bf8aefc8-5113-40f8-bfc4-90c233dc7151"), LogDate = new DateTime(2018, 10, 3, 22, 19, 37, 560, DateTimeKind.Local), UserId = "2204dae4-6cb2-4dbd-aac8-972d486ed767", WeightValue = 82f },
                        new { Id = new Guid("caddad0a-644f-4b00-b0af-51f1680f74be"), LogDate = new DateTime(2018, 10, 4, 22, 19, 37, 560, DateTimeKind.Local), UserId = "2204dae4-6cb2-4dbd-aac8-972d486ed767", WeightValue = 83f },
                        new { Id = new Guid("07889197-1780-477b-85aa-c773dc6bb6e1"), LogDate = new DateTime(2018, 10, 5, 22, 19, 37, 560, DateTimeKind.Local), UserId = "2204dae4-6cb2-4dbd-aac8-972d486ed767", WeightValue = 84f },
                        new { Id = new Guid("cffc6503-53dd-44d5-b3c4-22e4471f7855"), LogDate = new DateTime(2018, 10, 6, 22, 19, 37, 560, DateTimeKind.Local), UserId = "2204dae4-6cb2-4dbd-aac8-972d486ed767", WeightValue = 85f },
                        new { Id = new Guid("0b32db60-31ff-43b8-8528-abc903edf4a6"), LogDate = new DateTime(2018, 10, 7, 22, 19, 37, 560, DateTimeKind.Local), UserId = "2204dae4-6cb2-4dbd-aac8-972d486ed767", WeightValue = 86f },
                        new { Id = new Guid("d8aae1e1-0051-4440-9e3f-9756421dd0fa"), LogDate = new DateTime(2018, 10, 8, 22, 19, 37, 560, DateTimeKind.Local), UserId = "2204dae4-6cb2-4dbd-aac8-972d486ed767", WeightValue = 87f },
                        new { Id = new Guid("ab38039b-e5a8-46e4-aa01-3a559d5714e4"), LogDate = new DateTime(2018, 10, 9, 22, 19, 37, 560, DateTimeKind.Local), UserId = "2204dae4-6cb2-4dbd-aac8-972d486ed767", WeightValue = 88f },
                        new { Id = new Guid("4b7f5564-1bd9-4ce5-9735-d7350400a43c"), LogDate = new DateTime(2018, 10, 10, 22, 19, 37, 560, DateTimeKind.Local), UserId = "2204dae4-6cb2-4dbd-aac8-972d486ed767", WeightValue = 89f }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("FitnessCommunity.Models.WeightLog", b =>
                {
                    b.HasOne("FitnessCommunity.Models.ApplicationUser", "User")
                        .WithMany("WeightLogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("FitnessCommunity.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("FitnessCommunity.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FitnessCommunity.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("FitnessCommunity.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
